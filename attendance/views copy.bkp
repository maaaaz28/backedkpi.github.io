from unicodedata import category
from aiohttp import request
from django.http import HttpResponse, JsonResponse
from django.shortcuts import render, redirect
from django.urls import reverse
from django.contrib.auth import authenticate, login, logout, update_session_auth_hash
from django.contrib.auth.forms import UserCreationForm
from django.contrib.auth.decorators import login_required
import json
from datetime import datetime
from django.contrib.auth.models import User
from django.contrib import messages
from django.db.models import Q
from attendance.forms import CustomUserCreationForm
# from attendance.models import Course, Department
# from ams.settings import MEDIA_ROOT, MEDIA_URL
# from attendance.models import Department

from backend_internal_app2.models import Qualities
# from attendance.forms import  SaveCourse
from django.contrib.auth import get_user_model

User = get_user_model()

# deparment_list = Department.objects.exclude(status = 2).all()
# context = {
#     'page_title' : 'Simple Blog Site',
#     'deparment_list' : deparment_list,
#     'deparment_list_limited' : deparment_list[:3]
# }
# #Logout
def logoutuser(request):
    logout(request)
    return redirect('/')


#EMPLOYEE
@login_required
def course(request):
    context ={}
    users = User.objects.all()
    
    context['page_title'] = "BACKEND INTERNAL | ADMIN"
    context['user'] = users
    return render(request, 'course_mgt.html',context)

# @login_required
# def manage_course(request, pk=None):
#     pass

# @login_required
# def save_course(request, pk=None):
#     pass

# @login_required
# def delete_course(request, pk=None):
#     pass

# @login_required
# def assign_marks(request, pk=None):
#     pass

# from .forms import CustomUserCreationForm  # Import the form

# @login_required
# def register_view(request):
#     if request.method == 'POST':
#         form = CustomUserCreationForm(request.POST, request.FILES)
#         if form.is_valid():
#             user = form.save()
#             login(request, user)
#             messages.success(request, 'Registration successful. You are now logged in.')
#             return redirect('employee')  
#         else:
#             messages.error(request, 'Error during registration. Please check the form.')
#     else:
#         form = CustomUserCreationForm()

#     return render(request, 'manage_course.html', {'form': form})


# @login_required
# def save_course(request):
#     resp = { 'status':'failed' , 'msg' : '' }
#     if request.method == 'POST':
#         course = None
#         print(not request.POST['id'] == '')
#         if not request.POST['id'] == '':
#             course = User.objects.filter(id=request.POST['id']).first()
#         if not course == None:
#             form = SaveCourse(request.POST,instance = course)
#         else:
#             form = SaveCourse(request.POST)
#     if form.is_valid():
#         form.save()
#         resp['status'] = 'success'
#         messages.success(request, 'saved successfully')
#     else:
#         for field in form:
#             for error in field.errors:
#                 resp['msg'] += str(error + '<br>')
#         if not course == None:
#             form = SaveCourse(instance = course)
       
#     return HttpResponse(json.dumps(resp),content_type="application/json")

@login_required
def delete_course(request):
    resp={'status' : 'failed', 'msg':''}
    if request.method == 'POST':
        id = request.POST['id']
        try:
            course = User.objects.filter(id = id).first()
            course.delete()
            resp['status'] = 'success'
            messages.success(request,'Course has been deleted successfully.')
        except Exception as e:
            raise print(e)
    return HttpResponse(json.dumps(resp),content_type="application/json")

# def assign_marks(request):
#     # Assuming you have a Course model and you want to fetch all courses
#     courses = Course.objects.all()

#     # Retrieve course IDs from the URL
#     course_ids_str = request.GET.get('courses', '')
#     course_ids = list(map(int, course_ids_str.split(',')))

#     return render(request, 'assign-marks.html', {'courses': courses, 'course_ids': course_ids})
            user_qualities = QualitiesForm.objects.create(
                user=user,
                sense_of_responsibility=form.cleaned_data['sense_of_responsibility'],
                quality_of_work=form.cleaned_data['quality_of_work'],
                conceptual_design_ability =form.cleaned_data['conceptual_design_ability'],
                problem_solving_ability=form.cleaned_data['problem_solving_ability'],
                technical_programming_skills =form.cleaned_data['technical_programming_skills'],
                takes_initiative=form.cleaned_data['takes_initiative' ], 
                team_work =form.cleaned_data['team_work' ], 
                productivity=form.cleaned_data[ 'productivity'], 
                independent_work =form.cleaned_data['independent_work'],
                honesty_integrity=form.cleaned_data['honesty_integrity'], 
                work_consistency=form.cleaned_data['work_consistency'], 
                capacity_for_change=form.cleaned_data[ 'capacity_for_change'] ,
                client_relations=form.cleaned_data['client_relations'], 
                communication =form.cleaned_data[ 'communication' ], 
                strategic_perspective=form.cleaned_data['strategic_perspective'] , 
                punctuality_attendance =form.cleaned_data[ 'punctuality_attendance'] , 
                        
                # Add other fields from the form here
                create_date=create_date
            )
